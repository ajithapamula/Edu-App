// src/services/API/courseDocuments.js
import { apiRequest } from './index';

export const courseDocumentsAPI = {
  // Add new course document - POST /api/trainer/course-documents/add
  add: async (documentData) => {
    try {
      console.log('API: Adding document with data:', documentData);
      
      // Validate required fields
      if (!documentData.file) {
        throw new Error('No file provided for upload');
      }
      
      if (!documentData.Batch_ID) {
        throw new Error('Batch_ID is required');
      }
      
      if (!documentData.Document_Title) {
        throw new Error('Document_Title is required');
      }
      
      // Create FormData with ONLY the required fields
      const formData = new FormData();
      
      // Add the file with Document_Path as field name (backend expects this)
      formData.append('Document_Path', documentData.file, documentData.file.name);
      
      // Add the metadata fields
      formData.append('Batch_ID', documentData.Batch_ID);
      formData.append('Document_Title', documentData.Document_Title);
      
      // Note: Document_ID and Document_Upload_DateTime will be auto-generated by the backend
      
      // Log FormData contents for debugging
      console.log('FormData contents being sent to backend:');
      for (let [key, value] of formData.entries()) {
        if (value instanceof File) {
          console.log(`${key}:`, `File(${value.name}, ${value.size} bytes)`);
        } else {
          console.log(`${key}:`, value);
        }
      }
      
      return await apiRequest('/api/trainer/course-documents/add', {
        method: 'POST',
        body: formData
        // Note: Don't set Content-Type header for FormData, let browser set it with boundary
      });
    } catch (error) {
      console.error('API Error in add:', error);
      throw new Error(`Failed to add course document: ${error.message}`);
    }
  },

  // Get specific course document - GET /api/trainer/course-documents/list/{id}
  getById: async (id) => {
    try {
      if (!id) {
        throw new Error('Document ID is required');
      }
      
      const response = await apiRequest(`/api/trainer/course-documents/list/${id}`, {
        method: 'GET'
      });
      
      console.log('API Response for getById:', response);
      return response;
    } catch (error) {
      console.error('API Error in getById:', error);
      throw new Error(`Failed to fetch course document: ${error.message}`);
    }
  },

  // Get all course documents - GET /api/trainer/course-documents/lists
  getAll: async () => {
    try {
      const response = await apiRequest('/api/trainer/course-documents/lists', {
        method: 'GET'
      });
      
      console.log('API Response for getAll:', response);
      
      // Your API returns the array directly, so return it as is
      return Array.isArray(response) ? response : response;
    } catch (error) {
      console.error('API Error in getAll:', error);
      throw new Error(`Failed to fetch course documents: ${error.message}`);
    }
  },

  // Update course document - PUT /api/trainer/course-documents/update/{id}
  update: async (id, documentData) => {
    try {
      if (!id) {
        throw new Error('Document ID is required');
      }
      
      console.log('API: Updating document with data:', documentData);
      
      let body;
      let headers = {};
      
      if (documentData.file) {
        // If there's a file, use FormData with only required fields
        const formData = new FormData();
        
        // Add the actual file for upload
        formData.append('file', documentData.file);
        
        // Add only the fields that can be updated
        if (documentData.Batch_ID) {
          formData.append('Batch_ID', documentData.Batch_ID);
        }
        if (documentData.Document_Title) {
          formData.append('Document_Title', documentData.Document_Title);
        }
        if (documentData.Document_Path) {
          formData.append('Document_Path', documentData.Document_Path);
        }
        
        body = formData;
        // Don't set Content-Type for FormData
      } else {
        // JSON data only for metadata updates
        const updateData = {};
        if (documentData.Batch_ID) updateData.Batch_ID = documentData.Batch_ID;
        if (documentData.Document_Title) updateData.Document_Title = documentData.Document_Title;
        
        body = JSON.stringify(updateData);
        headers['Content-Type'] = 'application/json';
      }
      
      return await apiRequest(`/api/trainer/course-documents/update/${id}`, {
        method: 'PUT',
        headers,
        body: body
      });
    } catch (error) {
      console.error('API Error in update:', error);
      throw new Error(`Failed to update course document: ${error.message}`);
    }
  },

  // Delete course document - DELETE /api/trainer/course-documents/remove/{id}
  remove: async (id) => {
    try {
      if (!id) {
        throw new Error('Document ID is required');
      }
      
      console.log('API: Deleting document with ID:', id);
      
      return await apiRequest(`/api/trainer/course-documents/remove/${id}`, {
        method: 'DELETE'
      });
    } catch (error) {
      console.error('API Error in remove:', error);
      throw new Error(`Failed to delete course document: ${error.message}`);
    }
  },

  // View document content - GET /api/trainer/course-documents/view-document/{id}
  viewDocument: async (id) => {
    try {
      if (!id) {
        throw new Error('Document ID is required');
      }
      
      console.log('API: Viewing document with ID:', id);
      
      return await apiRequest(`/api/trainer/course-documents/view-document/${id}`, {
        method: 'GET'
      });
    } catch (error) {
      console.error('API Error in viewDocument:', error);
      throw new Error(`Failed to view course document: ${error.message}`);
    }
  }
};