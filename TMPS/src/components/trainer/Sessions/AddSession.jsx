import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Snackbar,
  IconButton,
  Breadcrumbs,
  Link,
  CircularProgress,
  Divider,
  Paper,
  Stack
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Save as SaveIcon,
  Clear as ClearIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Person as PersonIcon,
  Schedule as ScheduleIcon,
  Link as LinkIcon,
  Assessment as AssessmentIcon
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';

// Import the sessions API
import { sessionsAPI } from '../../../services/API/sessions';

const AddSession = () => {
  const navigate = useNavigate();
  const { id } = useParams(); // For edit mode
  const isEditMode = Boolean(id);
  
  const [formData, setFormData] = useState({
    Session_ID: '',
    Batch_ID: '',
    Student_ID: '',
    Student_Name: '', // This will be auto-generated by backend, but we can show it for edit mode
    Session_Link: '',
    Status: '',
    Start_DateTime: '',
    End_DateTime: '',
    Attended: '',
    Percentage: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    if (isEditMode && id) {
      fetchSessionForEdit();
    }
  }, [id, isEditMode]);

  const fetchSessionForEdit = async () => {
    try {
      setLoading(true);
      
      // Try to get specific session, if that fails, get all and filter
      let session = null;
      
      try {
        session = await sessionsAPI.getById(id);
      } catch (getByIdError) {
        console.log('getById failed, trying getAll approach:', getByIdError);
        
        const allSessions = await sessionsAPI.getAll();
        session = allSessions.find(s => 
          s.Session_ID === parseInt(id) || 
          s.id === parseInt(id)
        );
      }
      
      if (session) {
        // Convert session data to form format
        setFormData({
          Session_ID: session.Session_ID || '',
          Batch_ID: session.Batch_ID || '',
          Student_ID: session.Student_ID || '',
          Student_Name: session.Student_Name || '',
          Session_Link: session.Session_Link || '',
          Status: session.Status || '',
          Start_DateTime: session.Start_DateTime ? formatDateForInput(session.Start_DateTime) : '',
          End_DateTime: session.End_DateTime ? formatDateForInput(session.End_DateTime) : '',
          Attended: session.Attended || '',
          Percentage: session.Percentage || ''
        });
      } else {
        setError('Session not found');
      }
    } catch (err) {
      setError('Failed to fetch session details');
      console.error('Error fetching session for edit:', err);
    } finally {
      setLoading(false);
    }
  };

  // Format date for datetime-local input
  const formatDateForInput = (dateStr) => {
    try {
      const date = new Date(dateStr);
      if (isNaN(date.getTime())) return '';
      
      // Format as YYYY-MM-DDTHH:mm
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      
      return `${year}-${month}-${day}T${hours}:${minutes}`;
    } catch (error) {
      return '';
    }
  };

  // Format datetime-local input for API (backend expects YYYY-MM-DD HH:MM:SS format)
  const formatDateForAPI = (inputStr) => {
    try {
      if (!inputStr) return null;
      const date = new Date(inputStr);
      if (isNaN(date.getTime())) return null;
      
      // Format as YYYY-MM-DD HH:MM:SS (backend requirement)
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      const seconds = String(date.getSeconds()).padStart(2, '0');
      
      return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    } catch (error) {
      return null;
    }
  };

  const handleInputChange = (field) => (event) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }));
  };

  const validateForm = () => {
    const errors = [];
    
    // Backend required fields: Batch_ID, Student_ID, Start_DateTime
    if (!formData.Batch_ID) errors.push('Batch ID is required');
    if (!formData.Student_ID) errors.push('Student ID is required');
    if (!formData.Start_DateTime) errors.push('Start Date Time is required');
    
    // Validate that end time is after start time (if both provided)
    if (formData.Start_DateTime && formData.End_DateTime) {
      const startDate = new Date(formData.Start_DateTime);
      const endDate = new Date(formData.End_DateTime);
      if (endDate <= startDate) {
        errors.push('End time must be after start time');
      }
    }
    
    // Validate percentage if provided (backend validates 0-100)
    if (formData.Percentage && (isNaN(formData.Percentage) || formData.Percentage < 0 || formData.Percentage > 100)) {
      errors.push('Percentage must be between 0 and 100');
    }
    
    // Validate Attended field (backend only accepts 'present' or 'absent')
    if (formData.Attended && !['present', 'absent'].includes(formData.Attended)) {
      errors.push('Attendance must be either "present" or "absent"');
    }
    
    // Validate Status length (backend max 50 characters)
    if (formData.Status && formData.Status.length > 50) {
      errors.push('Status must be maximum 50 characters');
    }
    
    return errors;
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    
    const validationErrors = validateForm();
    if (validationErrors.length > 0) {
      setSnackbar({
        open: true,
        message: validationErrors.join(', '),
        severity: 'error'
      });
      return;
    }
    
    try {
      setSaving(true);
      
      // Prepare data for backend
      const sessionData = {
        Batch_ID: parseInt(formData.Batch_ID),
        Student_ID: parseInt(formData.Student_ID),
        Start_DateTime: formatDateForAPI(formData.Start_DateTime),
      };
      
      // Add optional fields only if they have values
      if (formData.End_DateTime) {
        sessionData.End_DateTime = formatDateForAPI(formData.End_DateTime);
      }
      
      if (formData.Session_Link && formData.Session_Link.trim()) {
        sessionData.Session_Link = formData.Session_Link.trim();
      }
      
      if (formData.Status && formData.Status.trim()) {
        sessionData.Status = formData.Status.trim();
      }
      
      if (formData.Attended) {
        sessionData.Attended = formData.Attended;
      }
      
      if (formData.Percentage) {
        sessionData.Percentage = parseFloat(formData.Percentage);
      }
      
      // For edit mode, include Student_Name if it exists
      if (isEditMode && formData.Student_Name) {
        sessionData.Student_Name = formData.Student_Name;
      }
      
      console.log('Sending session data to API:', sessionData);
      
      let response;
      if (isEditMode) {
        response = await sessionsAPI.update(id, sessionData);
      } else {
        response = await sessionsAPI.create(sessionData);
      }
      
      console.log('API Response:', response);
      
      setSnackbar({
        open: true,
        message: `Session ${isEditMode ? 'updated' : 'created'} successfully!`,
        severity: 'success'
      });
      
      // Navigate back to sessions list after a short delay
      setTimeout(() => {
        navigate('/trainer/sessions');
      }, 1500);
      
    } catch (err) {
      console.error(`Error ${isEditMode ? 'updating' : 'creating'} session:`, err);
      setSnackbar({
        open: true,
        message: `Failed to ${isEditMode ? 'update' : 'create'} session: ${err.message}`,
        severity: 'error'
      });
    } finally {
      setSaving(false);
    }
  };

  const handleReset = () => {
    if (isEditMode) {
      fetchSessionForEdit(); // Reload original data
    } else {
      setFormData({
        Session_ID: '',
        Batch_ID: '',
        Student_ID: '',
        Student_Name: '',
        Session_Link: '',
        Status: '',
        Start_DateTime: '',
        End_DateTime: '',
        Attended: '',
        Percentage: ''
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  if (loading) {
    return (
      <Box 
        display="flex" 
        justifyContent="center" 
        alignItems="center" 
        minHeight="60vh"
        sx={{ bgcolor: 'background.default' }}
      >
        <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
          <Box display="flex" flexDirection="column" alignItems="center">
            <CircularProgress size={48} thickness={4} />
            <Typography variant="h6" sx={{ mt: 2, color: 'text.secondary' }}>
              Loading session data...
            </Typography>
          </Box>
        </Paper>
      </Box>
    );
  }

  return (
    <Box sx={{ bgcolor: 'background.default', minHeight: '100vh', py: 3 }}>
      <Box maxWidth="800px" mx="auto" px={3}>
        {/* Breadcrumbs */}
        <Breadcrumbs sx={{ mb: 3 }}>
          <Link 
            color="inherit" 
            onClick={() => navigate('/trainer/sessions')}
            sx={{ 
              cursor: 'pointer',
              '&:hover': { textDecoration: 'underline' }
            }}
          >
            Sessions
          </Link>
          <Typography color="text.primary" fontWeight="medium">
            {isEditMode ? 'Edit Session' : 'Create Session'}
          </Typography>
        </Breadcrumbs>

        {/* Header */}
        <Paper elevation={2} sx={{ p: 3, mb: 3, borderRadius: 3 }}>
          <Box display="flex" alignItems="center">
            <IconButton 
              onClick={() => navigate('/trainer/sessions')} 
              sx={{ 
                mr: 2,
                bgcolor: 'action.hover',
                '&:hover': { bgcolor: 'action.selected' }
              }}
            >
              <ArrowBackIcon />
            </IconButton>
            
            <Box 
              sx={{ 
                bgcolor: isEditMode ? 'secondary.light' : 'primary.light', 
                p: 1.5, 
                borderRadius: 2, 
                mr: 2 
              }}
            >
              {isEditMode ? <EditIcon sx={{ color: 'secondary.main' }} /> : <AddIcon sx={{ color: 'primary.main' }} />}
            </Box>
            
            <Box>
              <Typography variant="h4" fontWeight="bold" gutterBottom>
                {isEditMode ? 'Edit Session' : 'Create New Session'}
              </Typography>
              <Typography variant="body1" color="text.secondary">
                {isEditMode 
                  ? `Editing Session ID: ${formData.Session_ID}` 
                  : 'Fill in the required details below to create a new training session'
                }
              </Typography>
            </Box>
          </Box>
        </Paper>

        {error && (
          <Alert 
            severity="error" 
            sx={{ mb: 3, borderRadius: 2 }}
            action={
              <Button color="inherit" size="small" onClick={fetchSessionForEdit}>
                Retry
              </Button>
            }
          >
            {error}
          </Alert>
        )}

        {/* Main Form */}
        <Paper elevation={4} sx={{ borderRadius: 3, overflow: 'hidden' }}>
          <Box sx={{ 
            bgcolor: 'primary.main', 
            color: 'white', 
            p: 3,
            display: 'flex',
            alignItems: 'center'
          }}>
            <ScheduleIcon sx={{ mr: 2, fontSize: 28 }} />
            <Box>
              <Typography variant="h5" fontWeight="bold">
                Session Information
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                {isEditMode 
                  ? "Update the session details below" 
                  : "Only Batch ID, Student ID, and Start Date/Time are required"
                }
              </Typography>
            </Box>
          </Box>

          <CardContent sx={{ p: 4 }}>
            <form onSubmit={handleSubmit}>
              <Stack spacing={4}>

                {/* Session ID - only show in edit mode */}
                {isEditMode && (
                  <Box>
                    <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                      <AssessmentIcon sx={{ mr: 1, color: 'primary.main' }} />
                      Session Identification
                    </Typography>
                    <TextField
                      fullWidth
                      label="Session ID"
                      value={formData.Session_ID}
                      disabled
                      variant="outlined"
                      helperText="Session ID cannot be changed"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          bgcolor: 'action.hover'
                        }
                      }}
                    />
                  </Box>
                )}

                {/* Basic Information Section */}
                <Box>
                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                    <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />
                    Basic Information
                  </Typography>
                  <Divider sx={{ mb: 3 }} />
                  
                  <Stack spacing={3}>
                    <TextField
                      fullWidth
                      label="Batch ID"
                      value={formData.Batch_ID}
                      onChange={handleInputChange('Batch_ID')}
                      variant="outlined"
                      required
                      type="number"
                      helperText="Enter the batch identifier"
                      InputProps={{
                        startAdornment: <Typography sx={{ mr: 1, color: 'text.secondary' }}>#</Typography>
                      }}
                    />

                    <TextField
                      fullWidth
                      label="Student ID"
                      value={formData.Student_ID}
                      onChange={handleInputChange('Student_ID')}
                      variant="outlined"
                      required
                      type="number"
                      helperText="Enter the student identifier"
                      InputProps={{
                        startAdornment: <Typography sx={{ mr: 1, color: 'text.secondary' }}>#</Typography>
                      }}
                    />

                    <TextField
                      fullWidth
                      label="Student Name"
                      value={formData.Student_Name}
                      onChange={handleInputChange('Student_Name')}
                      variant="outlined"
                      disabled={!isEditMode}
                      helperText={
                        isEditMode 
                          ? "Student name from database" 
                          : "Will be auto-generated based on Student ID"
                      }
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          bgcolor: !isEditMode ? 'action.hover' : 'inherit'
                        }
                      }}
                    />

                    <TextField
                      fullWidth
                      label="Session Link"
                      value={formData.Session_Link}
                      onChange={handleInputChange('Session_Link')}
                      variant="outlined"
                      type="url"
                      helperText="Enter the session meeting/conference link (optional)"
                      InputProps={{
                        startAdornment: <LinkIcon sx={{ mr: 1, color: 'text.secondary' }} />
                      }}
                    />
                  </Stack>
                </Box>

                {/* Session Timing Section */}
                <Box>
                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                    <ScheduleIcon sx={{ mr: 1, color: 'primary.main' }} />
                    Session Timing
                  </Typography>
                  <Divider sx={{ mb: 3 }} />
                  
                  <Stack spacing={3}>
                    <TextField
                      fullWidth
                      label="Start Date & Time"
                      value={formData.Start_DateTime}
                      onChange={handleInputChange('Start_DateTime')}
                      variant="outlined"
                      type="datetime-local"
                      required
                      InputLabelProps={{ shrink: true }}
                      helperText="Select session start date and time"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          '&.Mui-focused': {
                            boxShadow: '0 0 0 2px rgba(25, 118, 210, 0.2)'
                          }
                        }
                      }}
                    />

                    <TextField
                      fullWidth
                      label="End Date & Time"
                      value={formData.End_DateTime}
                      onChange={handleInputChange('End_DateTime')}
                      variant="outlined"
                      type="datetime-local"
                      InputLabelProps={{ shrink: true }}
                      helperText="Select session end date and time (optional)"
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          '&.Mui-focused': {
                            boxShadow: '0 0 0 2px rgba(25, 118, 210, 0.2)'
                          }
                        }
                      }}
                    />
                  </Stack>
                </Box>

                {/* Session Status & Attendance Section */}
                <Box>
                  <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                    <AssessmentIcon sx={{ mr: 1, color: 'primary.main' }} />
                    Session Status & Attendance
                  </Typography>
                  <Divider sx={{ mb: 3 }} />
                  
                  <Stack spacing={3}>
                    <FormControl fullWidth variant="outlined">
                      <InputLabel>Status</InputLabel>
                      <Select
                        value={formData.Status}
                        onChange={handleInputChange('Status')}
                        label="Status"
                      >
                        <MenuItem value="">
                          <em>None</em>
                        </MenuItem>
                        <MenuItem value="Active">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'success.main', 
                              mr: 1 
                            }} />
                            Active
                          </Box>
                        </MenuItem>
                        <MenuItem value="Completed">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'primary.main', 
                              mr: 1 
                            }} />
                            Completed
                          </Box>
                        </MenuItem>
                        <MenuItem value="Cancelled">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'error.main', 
                              mr: 1 
                            }} />
                            Cancelled
                          </Box>
                        </MenuItem>
                        <MenuItem value="Scheduled">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'warning.main', 
                              mr: 1 
                            }} />
                            Scheduled
                          </Box>
                        </MenuItem>
                      </Select>
                    </FormControl>

                    <FormControl fullWidth variant="outlined">
                      <InputLabel>Attendance</InputLabel>
                      <Select
                        value={formData.Attended}
                        onChange={handleInputChange('Attended')}
                        label="Attendance"
                      >
                        <MenuItem value="">
                          <em>None</em>
                        </MenuItem>
                        <MenuItem value="present">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'success.main', 
                              mr: 1 
                            }} />
                            Present
                          </Box>
                        </MenuItem>
                        <MenuItem value="absent">
                          <Box display="flex" alignItems="center">
                            <Box sx={{ 
                              width: 8, 
                              height: 8, 
                              borderRadius: '50%', 
                              bgcolor: 'error.main', 
                              mr: 1 
                            }} />
                            Absent
                          </Box>
                        </MenuItem>
                      </Select>
                    </FormControl>

                    <TextField
                      fullWidth
                      label="Completion Percentage"
                      value={formData.Percentage}
                      onChange={handleInputChange('Percentage')}
                      variant="outlined"
                      type="number"
                      inputProps={{ min: 0, max: 100, step: 0.01 }}
                      helperText="Enter percentage (0-100)"
                      InputProps={{
                        endAdornment: <Typography sx={{ color: 'text.secondary' }}>%</Typography>
                      }}
                    />
                  </Stack>
                </Box>

                {/* Action Buttons */}
                <Box 
                  sx={{ 
                    pt: 2,
                    borderTop: '1px solid',
                    borderColor: 'divider'
                  }}
                >
                  <Stack direction="row" spacing={2} justifyContent="flex-end">
                    <Button
                      variant="outlined"
                      onClick={handleReset}
                      startIcon={<ClearIcon />}
                      disabled={saving}
                      size="large"
                      sx={{ minWidth: 120 }}
                    >
                      Reset
                    </Button>
                    
                    <Button
                      variant="outlined"
                      onClick={() => navigate('/trainer/sessions')}
                      disabled={saving}
                      size="large"
                      sx={{ minWidth: 120 }}
                    >
                      Cancel
                    </Button>
                    
                    <Button
                      type="submit"
                      variant="contained"
                      startIcon={saving ? <CircularProgress size={20} color="inherit" /> : <SaveIcon />}
                      disabled={saving}
                      size="large"
                      sx={{ 
                        minWidth: 160,
                        py: 1.5,
                        background: 'linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)',
                        '&:hover': {
                          background: 'linear-gradient(45deg, #1565c0 30%, #1976d2 90%)',
                        }
                      }}
                    >
                      {saving ? 'Saving...' : (isEditMode ? 'Update Session' : 'Create Session')}
                    </Button>
                  </Stack>
                </Box>

              </Stack>
            </form>
          </CardContent>
        </Paper>

        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
            sx={{ minWidth: 300 }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
};

export default AddSession;